/*Styling step 1: general styling and sittings*/

* {
    box-sizing: border-box;
}

body {
    background-color: #feb236;
}

section {
    background-color: #E6CBAD;
    padding: 5px;
    margin-bottom: 15px;
}

p {
    padding: 12px;
}

ul {
    list-style: none;
    margin: 0px;
    padding: 0px;
}

img {
    width: 95%;
    margin: auto;
    display: block;
}

h1,
h2,
h3 {
    text-align: center;
    padding: 2px;
}

h1 {
    color: black;
    text-decoration: underline;
    text-decoration-color: #ff7b25;
    animation-name: colored-underline;
    animation-duration: 2s;
    animation-iteration-count: infinite;
}

@keyframes colored-underline {
    0% {
        text-decoration-color: #ff7b25;
    }
    50% {
        text-decoration-color: yellow;
    }
    75% {
        text-decoration-color: #ff7b25;
    }
    100% {
        text-decoration-color: black;
    }
}

h2 {
    color: #ff7b25;
}

h3 {
    background-color: #feb236;
}


/* To target every P element that has "rtl" value for its "dir" attribute*/

p[dir="rtl"] {
    text-align: right;
}


/*To avoid overflowing the floated elements outside their container.*/

section::after,
#grid-floats::after,
#grid-flex::after {
    content: "";
    clear: both;
    display: table;
}


/*----*****Finished: step 1 *****----*/


/*Styling step 2: girds layout basic styling and sittings*/

#grid-floats,
#grid-flex {
    padding: 5px;
    background-color: #E6CBAD;
    border-radius: 15px;
}

#grid-flex {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
}

#grid-floats>.grid-item {
    float: left;
}

.grid-item {
    background-color: white;
    border: 5px solid #E6CBAD;
    border-radius: 15px;
}

.grid-item>p {
    width: 95%;
    margin: auto;
    margin-bottom: 10px;
    border-top: 1px solid #feb236;
    border-bottom: 1px solid #feb236;
}


/*----*****Finished: step 2 *****----*/


/*Styling step 3: making the style and layout complete 
depending on media queries*/


/*For mobile phones: 2 columns layout.*/

@media only screen and (max-width: 600px) {
    /*To make a kind of row and 
    divide the place in it equally on 2 elements*/
    #grid-floats>.grid-item,
    #grid-flex>.grid-item {
        width: calc(100% /2);
    }
    /*Select the the first element and give it
     the whole place in the first row*/
    #grid-floats>.grid-item:nth-child(1),
    #grid-flex>.grid-item:nth-child(1) {
        width: 100%;
    }
    /*To clear the float on every element that should start a new line.
    *Select every second element and repeat the counting cycle.
    *Number 2 represents a cycle size, N is a counter (starts at 0)*/
    #grid-floats>.grid-item:nth-child(2n) {
        clear: left;
    }
}


/*For tablets:  3 columns layout.*/

@media only screen and (min-width: 601px) and (max-width: 768px) {
    /*To make a kind of row and 
    divide the place in it equally on 3 elements*/
    #grid-floats>.grid-item,
    #grid-flex>.grid-item {
        width: calc(100% / 3);
    }
    /*Select the the first two elements and 
    divide the place in the first row on them equally*/
    #grid-floats>.grid-item:nth-child(-n+2),
    #grid-flex>.grid-item:nth-child(-n+2) {
        width: calc(100% / 2);
    }
    /*To clear the float on every element that should start a new line.
    *Select every third element and repeat the counting cycle.
    *Number 3 represents a cycle size, N is a counter (starts at 0)*/
    #grid-floats>.grid-item:nth-child(3n) {
        clear: left;
    }
}


/*For desktop: 4 columns layout.*/

@media only screen and (min-width: 769px) {
    /*To make a kind of row and 
    divide the place in it equally on 4 elements*/
    #grid-floats>.grid-item,
    #grid-flex>.grid-item {
        width: calc(100% / 4);
    }
    /*Select the the first  element and 
    give it 50% of the  place in the first row*/
    #grid-floats>.grid-item:nth-child(1),
    #grid-flex>.grid-item:nth-child(1) {
        width: 50%;
    }
    /*To clear the float on every element that should start a new line
    *Select every fourth element and repeat the counting cycle.
    *Number 4 represents a cycle size, N is a counter (starts at 0)*/
    #grid-floats>.grid-item:nth-child(4n) {
        clear: left;
    }
}


/*----*****Finished: step 3*****----*/


/*The format of the CSS code in this file is made automatically by: Visual Studio Code extension.
so please let me know if it is not good to use such a kind of extension*/